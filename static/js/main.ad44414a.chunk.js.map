{"version":3,"sources":["TransactionContext.js","AddTransaction.js","Transaction.js","TransactionList.js","ProgressBar.js","Balance.js","App.js","serviceWorker.js","index.js"],"names":["TransactionContext","createContext","TransactionProvider","props","useState","JSON","parse","localStorage","getItem","transactions","setTransactions","useEffect","setItem","stringify","Provider","value","children","AddTransaction","useContext","description","setDescription","amount","setAmount","type","setType","onSubmit","e","preventDefault","prevTransactions","name","onChange","target","className","placeholder","required","isNaN","alert","length","Transaction","id","Number","toLocaleString","undefined","minimumFractionDigits","onClick","parentElement","splice","TransactionList","map","transaction","i","key","ProgressBar","percentage","Infinity","style","Balance","expenses","incomes","push","totalExp","reduce","a","b","totalInc","totalBalance","Math","round","abs","toFixed","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ad44414a.chunk.js","sourcesContent":["import React, {useEffect, useState, createContext} from 'react';\n\nexport const TransactionContext = createContext();\n\nexport const TransactionProvider = (props) => {\n\n    const[transactions, setTransactions] = useState(\n        JSON.parse(localStorage.getItem('transactions')) || []\n    );\n\n    useEffect(() => {\n        localStorage.setItem('transactions', JSON.stringify(transactions))\n    }, [transactions])\n\n    return(\n        <TransactionContext.Provider value={[transactions, setTransactions]}>\n            {props.children}\n        </TransactionContext.Provider>\n    )\n}\n\n\n","import React, {useState, useContext} from 'react';\nimport {TransactionContext} from './TransactionContext';\n\nconst AddTransaction = () => {\n\n    const[transactions, setTransactions] = useContext(TransactionContext);\n    const[description, setDescription] = useState('');\n    const[amount, setAmount] = useState('');\n    const[type, setType] = useState('');\n\n    const updateDescription = e => {\n        setDescription(e.target.value);\n    }\n\n    const updateAmount = e => {\n        isNaN(e.target.value) ? alert('Please enter a number!') : setAmount(e.target.value);\n    }\n\n    const updateType = e => { \n        setType(e.target.value);\n    }\n\n\n    const addTransaction = e => {\n        e.preventDefault();\n        setTransactions(prevTransactions => [...prevTransactions, {type: type, description: description, amount: amount}]);\n        setDescription('');\n        setAmount('');\n        setType('');\n    }\n\n    return(\n        <div>\n            <form onSubmit={addTransaction}>\n                <select name=\"transactionType\" value={type} onChange={updateType}>\n                    <option>Income</option>\n                    <option>Expense</option>\n                </select>\n                <input className=\"descriptionInp\" type=\"text\" value={description} name=\"description\" onChange={updateDescription} placeholder=\"Description\" required />\n                <input className=\"amountInp\" type=\"text\" value={amount} name=\"amount\" onChange={updateAmount} placeholder=\"Amount\" required />\n                <button className=\"addBtn\">Add</button>\n            </form>\n            {transactions.length === 0 && <h3 className=\"noList\">Add your first transaction!</h3>}\n        </div>\n    )\n}\n\n\nexport default AddTransaction;","import React, {useContext} from 'react';\nimport {TransactionContext} from './TransactionContext';\n\nconst Transaction = ({id, type, description, amount}) => {\n\n    const[transactions, setTransactions] = useContext(TransactionContext);\n\n    const deleteTransaction = e => {\n        const {id} = e.target.parentElement;\n        transactions.splice(id, 1);\n        setTransactions([...transactions]);\n    }\n\n    return(\n        <div>\n            <h4 id={id} className={type === \"Expense\" ? \"exp descList\" : \"inc descList\"}>\n                <span className=\"descriptionSpan\">{description}</span>\n                <span className=\"amountSpan\">{type === \"Expense\" ? \"-£\" : \"£\"}{Number(amount).toLocaleString(undefined, {minimumFractionDigits: 2})}</span>\n                <button className=\"deleteBtn\" onClick={deleteTransaction}>x</button>\n            </h4>\n            <hr />\n        </div>\n    )\n}\n\n\nexport default Transaction;\n\n\n","import React, {useContext} from 'react';\nimport Transaction from './Transaction';\nimport {TransactionContext} from './TransactionContext';\n\n\nconst TransactionList = () => {\n\n    const[transactions] = useContext(TransactionContext); \n\n    return(\n        <div className=\"transactionList\">\n            {transactions.map((transaction, i) => (\n                <Transaction key={i} id={i} type={transaction.type} description={transaction.description} amount={transaction.amount} />\n            ))}\n        </div>\n    )\n}\n\nexport default TransactionList; \n\n","import React from 'react';\n\nconst ProgressBar = ({percentage}) => {\n\n    const progressBar = () => {\n        if(percentage <= 35) return 'low';\n        if(percentage > 35 && percentage <= 65) return 'medium';\n        if(percentage > 65 && percentage <= 85) return 'mediumTwo';\n        else return 'high';\n    }\n\n    return(\n        <h4>{percentage > 100 && percentage !== Infinity\n                ? (\n                    <div>\n                        <span className=\"exp\">Your outgoings are {percentage - 100}% higher than income</span>\n                        <div className=\"progressBar\">\n                            <div className=\"high\" style={{\"width\" : \"100%\"}}></div>\n                        </div>\n                    </div>\n                )  \n                : percentage > 0 && percentage !== Infinity\n                ? (\n                    <div>\n                        <span>Total spent: {percentage}%</span>\n                            <div className=\"progressBar\">\n                                <div className={progressBar()} style={{\"width\" : `${percentage}%`}}></div>\n                            </div>\n                    </div>\n                )  \n                : \"\"\n            }\n        </h4>\n    )\n}\n\n\nexport default ProgressBar;","import React, {useContext} from 'react';\nimport {TransactionContext} from './TransactionContext';\nimport ProgressBar from './ProgressBar';\n\nconst Balance = () => {\n\n    const[transactions] = useContext(TransactionContext);\n\n    const expenses = [0];\n    const incomes = [0];\n\n    transactions.map(transaction => {\n        return transaction.type === 'Expense'\n        ? expenses.push(Number(transaction.amount)) \n        : incomes.push(Number(transaction.amount));\n    })\n\n    const totalExp = expenses.reduce((a,b) => a + b);\n    const totalInc = incomes.reduce((a,b) => a + b);\n    const totalBalance = totalInc - totalExp;\n    const percentage = Math.round((totalExp / totalInc) * 100);\n  \n    return(\n        <div className=\"topNav\">\n            \n            <div className=\"containerTop\">\n                {/* Total In */}\n                <h4 className=\"balance\">\n                    <i className=\"fas\">&#xf53d;</i>\n                    <span className=\"totals\">Total in:</span>\n                    <span className=\"inc totalInc\">£{Number(totalInc).toLocaleString('en-GB', {minimumFractionDigits: 2})}</span>\n                </h4>\n                {/* Total Out */}\n                <h4 className=\"balance borderBalance\">\n                    <i className=\"far\">&#xf3d1;</i>\n                    <span className=\"totals\">Total out:</span>\n                    <span className=\"exp totalExp\">{totalExp === 0 ? \"\" : \"-\"}£{Number(Math.abs(totalExp)).toLocaleString('en-GB', {minimumFractionDigits: 2})}</span>\n                </h4>\n                {/* Total Balance */}\n                <h4 className=\"balance\"><i className=\"fas\">&#xf24e;</i><span className=\"totals\">Total Balance:</span>{totalBalance > 0 \n                    ? (<span className=\"inc totalInc\">£{Number(totalBalance).toLocaleString('en-GB', {minimumFractionDigits: 2})}</span>) \n                    : totalBalance < 0\n                    ? (<span className=\"exp totalExp\">-£{Number(Math.abs(totalBalance)).toLocaleString('en-GB', {minimumFractionDigits: 2})}</span>)\n                    : (<span className=\"totalExp\">£{totalBalance.toFixed(2)}</span>)\n                    }\n                </h4>\n            </div>\n            <ProgressBar percentage={percentage}/>\n        </div>\n    )\n}\n\nexport default Balance;\n\n\n\n","import React from 'react';\nimport './App.css';\nimport AddTransaction from './AddTransaction';\nimport TransactionList from './TransactionList';\nimport Balance from './Balance';\nimport {TransactionProvider} from './TransactionContext';\n\nconst App = () => {\n  return(\n    <TransactionProvider>\n      <div className=\"app\">\n        <div className=\"flex\">\n          <Balance />\n        </div>\n        <AddTransaction />\n        <TransactionList />\n      </div>\n    </TransactionProvider>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}